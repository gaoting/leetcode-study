{"id":2568,"fid":"2477","name":"到达首都的最少油耗","slug":"minimum-fuel-cost-to-report-to-the-capital","link":"https://leetcode.cn/problems/minimum-fuel-cost-to-report-to-the-capital/description/","percent":62.483795696136895,"level":"Medium","category":"algorithms","en_name":"Minimum Fuel Cost to Report to the Capital","cn_name":"到达首都的最少油耗","totalAC":"12K","totalSubmit":"19.2K","likes":103,"dislikes":0,"desc":"<p>给你一棵 <code>n</code>&nbsp;个节点的树（一个无向、连通、无环图），每个节点表示一个城市，编号从&nbsp;<code>0</code>&nbsp;到&nbsp;<code>n - 1</code>&nbsp;，且恰好有&nbsp;<code>n - 1</code>&nbsp;条路。<code>0</code>&nbsp;是首都。给你一个二维整数数组&nbsp;<code>roads</code>&nbsp;，其中&nbsp;<code>roads[i] = [a<sub>i</sub>, b<sub>i</sub>]</code>&nbsp;，表示城市&nbsp;<code>a<sub>i</sub></code> 和&nbsp;<code>b<sub>i</sub></code>&nbsp;之间有一条&nbsp;<strong>双向路</strong>&nbsp;。</p>\n\n<p>每个城市里有一个代表，他们都要去首都参加一个会议。</p>\n\n<p>每座城市里有一辆车。给你一个整数&nbsp;<code>seats</code>&nbsp;表示每辆车里面座位的数目。</p>\n\n<p>城市里的代表可以选择乘坐所在城市的车，或者乘坐其他城市的车。相邻城市之间一辆车的油耗是一升汽油。</p>\n\n<p>请你返回到达首都最少需要多少升汽油。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/09/22/a4c380025e3ff0c379525e96a7d63a3.png\" style=\"width: 303px; height: 332px;\"></p>\n\n<pre><b>输入：</b>roads = [[0,1],[0,2],[0,3]], seats = 5\n<b>输出：</b>3\n<b>解释：</b>\n- 代表 1 直接到达首都，消耗 1 升汽油。\n- 代表 2 直接到达首都，消耗 1 升汽油。\n- 代表 3 直接到达首都，消耗 1 升汽油。\n最少消耗 3 升汽油。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/11/16/2.png\" style=\"width: 274px; height: 340px;\"></p>\n\n<pre><b>输入：</b>roads = [[3,1],[3,2],[1,0],[0,4],[0,5],[4,6]], seats = 2\n<b>输出：</b>7\n<b>解释：</b>\n- 代表 2 到达城市 3 ，消耗 1 升汽油。\n- 代表 2 和代表 3 一起到达城市 1 ，消耗 1 升汽油。\n- 代表 2 和代表 3 一起到达首都，消耗 1 升汽油。\n- 代表 1 直接到达首都，消耗 1 升汽油。\n- 代表 5 直接到达首都，消耗 1 升汽油。\n- 代表 6 到达城市 4 ，消耗 1 升汽油。\n- 代表 4 和代表 6 一起到达首都，消耗 1 升汽油。\n最少消耗 7 升汽油。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/09/27/efcf7f7be6830b8763639cfd01b690a.png\" style=\"width: 108px; height: 86px;\"></p>\n\n<pre><b>输入：</b>roads = [], seats = 1\n<b>输出：</b>0\n<b>解释：</b>没有代表需要从别的城市到达首都。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>roads.length == n - 1</code></li>\n\t<li><code>roads[i].length == 2</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n</code></li>\n\t<li><code>a<sub>i</sub> != b<sub>i</sub></code></li>\n\t<li><code>roads</code>&nbsp;表示一棵合法的树。</li>\n\t<li><code>1 &lt;= seats &lt;= 10<sup>5</sup></code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    long long minimumFuelCost(vector<vector<int>>& roads, int seats) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public long minimumFuelCost(int[][] roads, int seats) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def minimumFuelCost(self, roads, seats):\n        \"\"\"\n        :type roads: List[List[int]]\n        :type seats: int\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def minimumFuelCost(self, roads: List[List[int]], seats: int) -> int:"},{"value":"c","text":"C","defaultCode":"long long minimumFuelCost(int** roads, int roadsSize, int* roadsColSize, int seats) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public long MinimumFuelCost(int[][] roads, int seats) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[][]} roads\n * @param {number} seats\n * @return {number}\n */\nvar minimumFuelCost = function(roads, seats) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function minimumFuelCost(roads: number[][], seats: number): number {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[][] $roads\n     * @param Integer $seats\n     * @return Integer\n     */\n    function minimumFuelCost($roads, $seats) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func minimumFuelCost(_ roads: [[Int]], _ seats: Int) -> Int {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun minimumFuelCost(roads: Array<IntArray>, seats: Int): Long {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int minimumFuelCost(List<List<int>> roads, int seats) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func minimumFuelCost(roads [][]int, seats int) int64 {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} roads\n# @param {Integer} seats\n# @return {Integer}\ndef minimum_fuel_cost(roads, seats)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def minimumFuelCost(roads: Array[Array[Int]], seats: Int): Long = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn minimum_fuel_cost(roads: Vec<Vec<i32>>, seats: i32) -> i64 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (minimum-fuel-cost roads seats)\n  (-> (listof (listof exact-integer?)) exact-integer? exact-integer?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec minimum_fuel_cost(Roads :: [[integer()]], Seats :: integer()) -> integer().\nminimum_fuel_cost(Roads, Seats) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec minimum_fuel_cost(roads :: [[integer]], seats :: integer) :: integer\n  def minimum_fuel_cost(roads, seats) do\n    \n  end\nend"}],"testcase":"[[0,1],[0,2],[0,3]]\n5","testable":true,"templateMeta":{"name":"minimumFuelCost","params":[{"name":"roads","type":"integer[][]"},{"type":"integer","name":"seats"}],"return":{"type":"long"}}}